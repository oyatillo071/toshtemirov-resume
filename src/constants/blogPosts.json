[
  {
    "id": 2,
    "title": "Axios: HTTP so'rovlarini yuborish va boshqarish",
    "slug": "mastering-axios",
    "excerpt": "Axios - bu zamonaviy veb-ishlab chiqishda juda foydali bo'lgan HTTP mijoz kutubxonasi. Keling, uning asosiy xususiyatlarini va qanday ishlatishni batafsil ko'rib chiqamiz.",
    "content": "Axios - bu zamonaviy veb-ishlab chiqishda keng qo'llaniladigan HTTP kutubxona. Axiosni ishlatish juda oson. U Promise asosida ishlaydi va brauzerda ham, Node.js muhitida ham ishlaydi.\n\nAxiosning asosiy afzalliklari:\n\n1. Avtomatik JSON transformatsiya: Axios JSON formatidagi ma'lumotlarni avtomatik ravishda qayta ishlaydi.\n2. Xavfsizlik: Axios XSRF hujumlaridan himoya qiladi.\n3. So'rov va javoblarni boshqarish: Axiosda so'rovlar va javoblarni oson qayta ishlash mumkin.\n4. Xatolarni boshqarish: Axiosda xatolarni oson boshqarish mumkin.\n5. Interceptorlar: So'rovlar va javoblarni yuborish yoki qabul qilishdan oldin ularni o'zgartirish imkoniyati.\n6. Parallel so'rovlar: Bir nechta so'rovlarni parallel ravishda yuborish imkoniyati.\n\nAxiosni ishlatish misollari:\n\n1. Asosiy GET so'rovi:\n\n```javascript\nimport axios from 'axios';\n\naxios.get('https://api.example.com/users')\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error('Xato yuz berdi:', error);\n  });\n```\n\n2. POST so'rovi:\n\n```javascript\naxios.post('https://api.example.com/users', {\n  firstName: 'Oyatillo',\n  lastName: 'Toshtemirov'\n  email: 'oyatillotoshtemirov@gmail.com'\n  })\n.then(response => {\n  console.log(response.data);\n})\n.catch(error => {\n  console.error('Xato yuz berdi:', error);\n});\n```\n\n3. Async/Await bilan ishlatish:\n\n```javascript\nasync function getUser() {\n  try {\n    const response = await axios.get('https://api.example.com/user/12345');\n    console.log(response.data);\n  } catch (error) {\n    console.error('Xato yuz berdi:', error);\n  }\n}\n```\n\n4. So'rov parametrlarini qo'shish:\n\n```javascript\naxios.get('https://api.example.com/users', {\n  params: {\n    ID: 12345\n  }\n})\n.then(response => {\n  console.log(response.data);\n})\n.catch(error => {\n  console.error('Xato yuz berdi:', error);\n});\n```\n\n5. Interceptorlardan foydalanish:\n\n```javascript\n// So'rov interceptori\naxios.interceptors.request.use(config => {\n  config.headers['Authorization'] = 'Bearer ' + localStorage.getItem('token');\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Javob interceptori\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response.status === 403||error.response.status === 401) {\n    // Token eskirgan, foydalanuvchini login sahifasiga yonaltirish \n  }\n  return Promise.reject(error);\n});\n```\n\n6. Parallel so'rovlar:\n\n```javascript\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });\n```\n\nAxiosni ishlatish juda oddiy va samarali. U HTTP so'rovlarini yuborish va qabul qilishni osonlashtiradi, shuningdek, ko'plab qo'shimcha imkoniyatlar taqdim etadi. Axiosdan foydalanib, siz o'z dasturingizda API bilan ishlashni yanada samarali va xavfsiz qila olasiz.",
    "author": "Oyatillo Toshtemirov",
    "date": "2024-12-25"
  },
  {
    "id": 3,
    "title": "React Custom Hook'lar: Kodingizni qayta ishlatish san'ati",
    "slug": "react-custom-hooks",
    "excerpt": "React Custom Hook'lar komponentlar o'rtasida mantiqni qayta ishlatish imkonini beruvchi kuchli vositadir. Keling, ularning afzalliklari va qanday yaratish haqida batafsil gaplashamiz.",
    "content": "React Custom Hook'lar - bu komponentlar o'rtasida mantiqni qayta ishlatish imkonini beruvchi vositadir. Ular React 16.8 versiyasida qo'shilgan va tezda mashhur bo'lgan.\n\nCustom Hook'larning afzalliklari:\n\n1. Kodni takrorlamaslik: Bir xil mantiqni bir nechta komponentlarda yozmasdan, uni faqat bitta hook'da yozish va kerakli joyda ishlatish mumkin.\n2. Testlashni osonlashtirish: Hook'larni test qilish oson.\n3. Toza va oson tushunarli kod: Hook'lar orqali kodni soddalashtirish mumkin.\n4. Mantiqni ajratish: Komponentlardan murakkab mantiqni alohida hook'larga ajratish mumkin.\n5. Qayta ishlatish: Hook'larni turli loyihalarda qayta ishlatish mumkin.\n\nCustom Hook yaratish va ishlatish misollari:\n\n1. useWindowSize hook:\n\n```javascript\nimport { useState, useEffect } from 'react';\n\nfunction useWindowSize() {\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    \n    window.addEventListener(\"resize\", handleResize);\n    handleResize();\n    \n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowSize;\n}\n\n// Ishlatish\nfunction MyComponent() {\n  const size = useWindowSize();\n  return (\n    <div>\n      {size.width}px / {size.height}px\n    </div>\n  );\n}\n```\n\n2. useLocalStorage hook:\n\n```javascript\nimport { useState } from 'react';\n\nfunction useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n// Ishlatish\nfunction App() {\n  const [name, setName] = useLocalStorage('name', 'Bob');\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Enter your name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n    </div>\n  );\n}\n```\n\n3. useFetch hook:\n\n```javascript\nimport { useState, useEffect } from 'react';\n\nfunction useFetch(url) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(url);\n        const json = await response.json();\n        setData(json);\n        setLoading(false);\n      } catch (error) {\n        setError(error);\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, [url]);\n\n  return { data, loading, error };\n}\n\n// Ishlatish\nfunction App() {\n  const { data, loading, error } = useFetch('https://api.example.com/data');\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return (\n    <div>\n      <h1>{data.title}</h1>\n      <p>{data.description}</p>\n    </div>\n  );\n}\n```",
    "author": "Oyatillo Toshtemirov",
    "date": "2025-02-17"
  }
]
